"""Request and Response validators."""
from pathlib import Path

import requests  # type: ignore


def is_pkcs_certificate(filepath: str) -> bool:
    """Check if the certificate is a PKCS12 certificate.

    :param filepath: Certificate file path.
    :type filepath: str
    :return: True if the certificate is a PKCS12 certificate, False otherwise.
    :rtype: bool
    """
    return filepath and Path(filepath).suffix in [".pfx", ".p12"]  # type: ignore


def is_success(status_code: int) -> bool:
    """Check if the requests is successful (200).

    :param status_code: Response received via request
    :type status_code: int
    :return: True if response has status code 200/201, else False
    :rtype: bool
    """
    code_list = [requests.codes.okay, requests.codes.created]
    return status_code in code_list


def is_bad_request(status_code: int) -> bool:
    """Check if the status is bad request (400).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is bad request else False
    :rtype: bool
    """
    return status_code == requests.codes.bad_request


def is_access_denied(status_code: int) -> bool:
    """Check if the status is access denied (401).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is unauthorized else False
    :rtype: bool
    """
    return status_code == requests.codes.unauthorized


def is_forbidden(status_code: int) -> bool:
    """Check if the status is forbidden (403).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is forbidden else False
    :rtype: bool
    """
    return status_code == requests.codes.forbidden


def is_not_found(status_code: int) -> bool:
    """Check if the status is not found (404).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is not found else False
    :rtype: bool
    """
    return status_code == requests.codes.not_found


def is_not_acceptable(status_code: int) -> bool:
    """Check if the status is not acceptable (406).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is not acceptable else False
    :rtype: bool
    """
    return status_code == requests.codes.not_acceptable


def is_request_timeout(status_code: int) -> bool:
    """Check if the status is request timeout (408).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is request timeout else False
    :rtype: bool
    """
    return status_code == requests.codes.request_timeout


def is_too_many_requests(status_code: int) -> bool:
    """Check if the status is too may requests (429).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is too many requests else False
    :rtype: bool
    """
    return status_code == requests.codes.too_many_requests


def is_no_response(status_code: int) -> bool:
    """Check if the status is no response (444).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is no response else False
    :rtype: bool
    """
    return status_code == requests.codes.no_response


def is_client_closed_request(status_code: int) -> bool:
    """Check if the status is client closed request (499).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is client closed request else False
    :rtype: bool
    """
    return status_code == requests.codes.client_closed_request


def is_internal_server_error(status_code: int) -> bool:
    """Check if the status is internal server error (500).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is internal server error else False
    :rtype: bool
    """
    return status_code == requests.codes.internal_server_error


def is_bad_gateway(status_code: int) -> bool:
    """Check if the status is bad gateway (502).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is bad gateway else False
    :rtype: bool
    """
    return status_code == requests.codes.bad_gateway


def is_service_unavailable(status_code: int) -> bool:
    """Check if the status is service unavailable (503).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is service unavailable else False
    :rtype: bool
    """
    return status_code == requests.codes.service_unavailable


def is_gateway_timeout(status_code: int) -> bool:
    """Check if the status is gateway timeout (504).

    :param status_code: Response status code
    :type status_code: int
    :return: True if status code is gateway timeout else False
    :rtype: bool
    """
    return status_code == requests.codes.gateway_timeout
