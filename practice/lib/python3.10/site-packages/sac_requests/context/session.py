"""Module contains the helper function for the sac requests context."""
import requests  # type: ignore
from requests.adapters import HTTPAdapter  # type: ignore
from requests.packages.urllib3.util.retry import Retry  # type: ignore
from urllib3.exceptions import InsecureRequestWarning

from sac_requests.adapters.pkcs import PKCSAdapter
from sac_requests.adapters.ssl_adapter import SSLAdapter
from sac_requests.adapters.timeout import TimeoutHTTPAdapter
from sac_requests.constants.general import HTTP, HTTPS
from sac_requests.context.config import HttpConfig
from sac_requests.utils.validators import is_pkcs_certificate


class Session:
    """Session class for the requests session object."""

    def __init__(self, config: HttpConfig) -> None:
        """Initialize the session object.

        :param config: Request configurations with retry and timeout configurations.
        :type config: HttpConfig
        """
        # Retry configurations
        self._retries = self.__get_retries(config)
        # Timeout configurations

        if config.cert:
            # SSL certificate configuratios
            self._adapter = self.__get_ssl_adapter(
                config.timeout, config.cert, config.key, config.passphrase
            )
        else:
            # Timeout configurations
            self._adapter = self.__get_timeout_adapter(config.timeout)
        # Session configurations
        self._session = self.__get_requests_session(config)

    def __get_retries(self, config: HttpConfig) -> Retry:
        """Get the retry configurations.

        :param config: Request configurations with retry and timeout configurations.
        :type config: HttpConfig
        :return: Retry configurations.
        :rtype: Retry
        """
        return Retry(
            total=config.max_retry,
            backoff_factor=config.retry_interval,
            status_forcelist=config.status_force_list,
        )

    def __get_timeout_adapter(self, timeout: int) -> TimeoutHTTPAdapter:
        """Get the timeout adapter.

        :param timeout: Timeout value.
        :type timeout: int
        :return: Timeout adapter.
        :rtype: TimeoutHTTPAdapter
        """
        return TimeoutHTTPAdapter(timeout=timeout, max_retries=self._retries)

    def __get_ssl_adapter(
        self, timeout: int, cert: str, key: str, passphrase: str
    ) -> HTTPAdapter:
        """Get the SSL adapter.

        :param timeout: Timeout value.
        :type timeout: int
        :param max_retries: Maximum number of retries.
        :type max_retries: int
        :param cert: Certificate file path.
        :type cert: str
        :param passphrase: Passphrase for the certificate.
        :type passphrase: str
        :return: SSL adapter.
        :rtype: HTTPAdapter
        """
        adapter = None
        if is_pkcs_certificate(cert):
            adapter = PKCSAdapter(
                timeout=timeout,  # type: ignore
                cert=cert,  # type: ignore
                passphrase=passphrase,  # type: ignore
                max_retries=self._retries,
            )
        else:
            adapter = SSLAdapter(
                timeout=timeout,  # type: ignore
                cert=cert,  # type: ignore
                key=key,  # type: ignore
                passphrase=passphrase,  # type: ignore
                max_retries=self._retries,
            )

        return adapter

    def __get_requests_session(self, config: HttpConfig) -> requests.Session:
        """Get the requests session object.

        :param config: Request configurations with retry and timeout configurations.
        :type config: HttpConfig
        :return: Request session object with retry and timeout configurations.
        :rtype: requests.Session
        """
        # Create session
        http = requests.Session()
        # Set verify
        http.verify = config.verify
        # Disable warnings if verify is false
        if not http.verify:
            # Disable warnings related to InsecureRequestWarning due to verify=False
            requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

        # Mount it for both http and https usage
        http.mount(f"{HTTP}://", self._adapter)
        http.mount(f"{HTTPS}://", self._adapter)

        return http

    def get(self) -> requests.Session:
        """Get the session object.

        :return: Session object.
        :rtype: requests.Session
        """
        return self._session

    def close(self) -> None:
        """Close the session object."""
        self._session.close()
