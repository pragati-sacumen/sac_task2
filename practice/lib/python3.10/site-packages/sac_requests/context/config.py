"""Request configurations to use while sending the request over HTTP/HTTPS."""
from typing import Any, List

from sac_requests.constants.defaults import (
    DEFAULT_AUTH_TYPE,
    DEFAULT_MAX_RETRY,
    DEFAULT_RETRY_INTERVAL,
    DEFAULT_STATUS_FORCE_LIST,
    DEFAULT_TIMEOUT,
    DEFAULT_VERIFY,
)
from sac_requests.constants.general import (
    AUTH_TYPE,
    CERT,
    KEY,
    MAX_RETRY,
    PASSPHRASE,
    RETRY_INTERVAL,
    STATUS_FORCE_LIST,
    TIMEOUT,
    VERIFY,
)
from sac_requests.utils.validators import is_pkcs_certificate


class HttpConfig:  # pylint: disable=too-few-public-methods
    """Http Request configurations Holder."""

    def __init__(self, **kwargs: Any) -> None:
        """Initialize the Http Request configurations.

        The configurations include:
        1. Timeout
        2. Retry Interval
        3. Response Status for which to force retry
        4. Maximum retry attempts to make.
        5. Authentication types
        6. Verify SSL
        7. Certificate
        8. Passphrase

        :param kwargs: All configuration params passed as an
        http request initialization.
        """
        self.timeout: int = kwargs.pop(TIMEOUT, DEFAULT_TIMEOUT)
        self.retry_interval: int = kwargs.pop(RETRY_INTERVAL, DEFAULT_RETRY_INTERVAL)
        self.status_force_list: List[int] = kwargs.pop(
            STATUS_FORCE_LIST, DEFAULT_STATUS_FORCE_LIST
        )
        self.max_retry: int = kwargs.pop(MAX_RETRY, DEFAULT_MAX_RETRY)
        self.auth_type: str = kwargs.pop(AUTH_TYPE, DEFAULT_AUTH_TYPE)
        self.verify: Any = kwargs.pop(VERIFY, DEFAULT_VERIFY)
        if (
            CERT in kwargs
            and not kwargs.get(KEY, None)
            and not kwargs.get(PASSPHRASE, None)
            and not is_pkcs_certificate(kwargs[CERT])
        ):
            # If only certificate is provided, then use the certificate
            self.verify = kwargs.pop(CERT, self.verify)

        self.cert: str = kwargs.pop(CERT, None)
        self.key: str = kwargs.pop(KEY, None)
        self.passphrase: str = kwargs.pop(PASSPHRASE, None)
        if (
            self.cert and is_pkcs_certificate(self.cert) and self.passphrase is None
        ):  # nosec
            self.passphrase = ""  # nosec
